// Generated by CoffeeScript 1.7.1
(function() {
  var BAP, TRM, TYPES, XML2JS, alert, badge, debug, echo, help, info, log, mk_request, njs_fs, parser, parser_options, rpr, warn, whisper;

  njs_fs = require('fs');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'rss';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  BAP = require('coffeenode-bitsnpieces');

  mk_request = require('request');

  XML2JS = require('xml2js');

  parser_options = {
    trim: true,
    explicitRoot: false,
    explicitArray: true
  };

  parser = new XML2JS.Parser(parser_options);

  this.read = function(request_options, handler) {
    var Z;
    Z = [];
    return mk_request(request_options, function(error, response, body) {
      if (error != null) {
        return handler(error);
      }
      if (response.statusCode !== 200) {
        return handler(new Error("something went wrong"));
      }
      return parser.parseString(body, (function(_this) {
        return function(error, json) {
          var channel, entry, item, _i, _j, _len, _len1, _ref, _ref1;
          if (error != null) {
            return handler(error);
          }
          _ref = json['channel'];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            channel = _ref[_i];
            Z.push((entry = []));
            _ref1 = channel['item'];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              item = _ref1[_j];
              entry['date_txt'] = item['pubDate'][0];
              entry['title'] = item['title'][0];
              entry['link'] = item['link'][0];
              entry['summary'] = item['description'][0];
              entry['content'] = item['content:encoded'][0];
              entry['tags'] = item['category'];
            }
          }
          return handler(null, Z);
        };
      })(this));
    });
  };

}).call(this);
