// Generated by CoffeeScript 1.7.1
(function() {
  var BAP, TRM, TYPES, XML2JS, alert, badge, debug, echo, f, help, info, log, mk_request, njs_fs, options, parser, parser_options, rpr, warn, whisper,
    __slice = [].slice;

  njs_fs = require('fs');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'rss';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  BAP = require('coffeenode-bitsnpieces');

  mk_request = require('request');

  XML2JS = require('xml2js');

  parser_options = {
    trim: true,
    explicitRoot: false,
    explicitArray: true
  };

  parser = new XML2JS.Parser(parser_options);

  options = {
    url: 'https://gueltiger-gutschein.de/tag/vodafone,berlin/feed'
  };

  f = function() {
    return mk_request(options, function(error, response, body) {
      if (error != null) {
        throw error;
      }
      if (response.statusCode !== 200) {
        throw new Error("something went wrong");
      }
      return parser.parseString(body, (function(_this) {
        return function(error, json) {
          var channel, content, date_txt, item, link, summary, tags, title, _i, _len, _ref, _results;
          if (error != null) {
            throw error;
          }
          BAP.walk_containers_crumbs_and_values(json, function(error, container, crumbs, value) {
            var head, key, locator, _i;
            if (error != null) {
              throw error;
            }
            if (crumbs === null) {
              log('over');
              return;
            }
            locator = '/' + crumbs.join('/');
            head = 2 <= crumbs.length ? __slice.call(crumbs, 0, _i = crumbs.length - 1) : (_i = 0, []), key = crumbs[_i++];
            if (TYPES.isa_text(value)) {
              value = value.slice(0, 101);
            } else {
              value = rpr(value);
            }
            return log(TRM.grey("" + locator + ":"), TRM.gold(value));
          });
          _ref = json['channel'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            channel = _ref[_i];
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = channel['item'];
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                date_txt = item['pubDate'][0];
                title = item['title'][0];
                link = item['link'][0];
                summary = item['description'][0];
                content = item['content:encoded'][0];
                tags = item['category'];
                debug('date_txt:    ', date_txt);
                debug('title:       ', title);
                debug('link:        ', link);
                debug('summary:     ', summary);
                debug('content:     ', content);
                _results1.push(debug('tags:        ', tags));
              }
              return _results1;
            })());
          }
          return _results;
        };
      })(this));
    });
  };

  f();

}).call(this);
